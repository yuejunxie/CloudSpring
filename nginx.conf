
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
     server {  
            #http端口
            listen 10080; 
            #https端口
            listen 10443 ssl; 
            #ssl_certificate /etc/nginx/ssl/nginx.crt;
            #ssl_certificate_key /etc/nginx/ssl/nginx.key;
            keepalive_timeout   70; 
            server_name  0.0.0.0;  
            #禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击
            server_tokens off;
            #如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问
            #fastcgi_param   HTTPS               on;
            #fastcgi_param   HTTP_SCHEME         https;            
      
            #valid_referers none blocked server_names 10.67.171.89  ;
            #if ($invalid_referer) {
            #    return 403;
            #}
            
            if ($request_method !~* GET|POST|DELETE|PUT) {
                return 403;
            }
            
            #安全头
             # add_header Content-Security-Policy "default-src 'self'" ;
            add_header X-Frame-Options SAMEORIGIN ;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" ;
            # add_header Cache-Control no-store ;
            add_header X-XSS-Protection "1; mode=block" ;
            add_header X-Content-Type-Options nosniff ;
            add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
            add_header Expires 0;
            add_header Pragma no-cache;
            #add_header Set-Cookie "HttpOnly";
            #add_header Set-Cookie "Secure";
            #add_header Content-Security-Policy "default-src 'self'; script-src 'self' http://webapi.amap.com 'unsafe-inline' 'unsafe-eval' https:; img-src 'self' https:  data:; style-src 'self' 'unsafe-inline' https:; font-src 'self' https:  data:; frame-src https:; object-src 'none'";
      
            #charset koi8-r;  
      
            #access_log  logs/host.access.log  main;  
            underscores_in_headers on; 
            location /bic {  
                proxy_pass   http://127.0.0.1:8016/bic;  
                index  index.html index.htm;  
				proxy_http_version 1.1;
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
            }
            location /portal {  
                proxy_pass   http://127.0.0.1:10000/portal;  
                index  index.html index.htm;  
				
				proxy_http_version 1.1; 
                #proxy_connect_timeout 4s; #配置点1
                #proxy_read_timeout 60s; #配置点2，如果没效，可以考虑这个时间配置长一点
                #proxy_send_timeout 12s; #配置点3
                proxy_set_header Upgrade $http_upgrade; #这是webSocket的配置，与此篇博客无关
                proxy_set_header Connection "Upgrade"; #这是webSocket的配置，与此篇博客无关
                proxy_set_header Origin "";
				
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
               # proxy_redirect   http:// https://;
            }    
            location /uc {  
                proxy_pass   http://127.0.0.1:8083/uc;  
                index  index.html index.htm;  
                 #配置请求头
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
                #解决getScheme，isSecure，sendRedirect
            }   
            location /cmdb {  
                proxy_pass   http://127.0.0.1:8081/cmdb;  
                index  index.html index.htm;  
                 #配置请求头
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
                #解决getScheme，isSecure，sendRedirect
            }   
            location /asset {  
                proxy_pass   http://127.0.0.1:8082/asset;
                index  index.html index.htm; 
                #配置请求头
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
                #解决getScheme，isSecure，sendRedirect                
            }  
            location /sbs {  
                proxy_pass   http://127.0.0.1:8090/sbs;  
                index  index.html index.htm;  
                 #配置请求头
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
                #解决getScheme，isSecure，sendRedirect
            }              
            location /exchange {  
                proxy_pass   http://127.0.0.1:8991/exchange;  
                index  index.html index.htm;  
                 #配置请求头
                proxy_set_header  Host $host:$server_port;
                proxy_set_header  X-Real-IP  $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto  $scheme; 
                #proxy_redirect   http:// https://;
                #解决getScheme，isSecure，sendRedirect
            }           
        }  
    

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
